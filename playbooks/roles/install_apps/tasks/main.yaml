---
- debug:
    msg: "{{ APPs }}"

- name: create app directories
  become: yes
  file:
    state: directory
    path: "/opt/bitnami/apps/{{ item.key }}"
    mode: '0775'
    owner: bitnami
    group: daemon
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable

- name: does a index.php file exist
  ansible.builtin.stat:
    path: "/opt/bitnami/apps/{{ item.key }}/index.php"
  register: index_php_stat
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable

- name: Create and Add items to dictionary
  set_fact: 
      index_php_present: "{{ index_php_present | default({}) | combine ({ item.item.key : item.stat.exists }) }}"
  loop: "{{ index_php_stat.results }}"

- name: Display the Dictionary
  debug: var=index_php_present

- name: touch index.html unless index.php exists, so user can safely remove index.html
  become: yes
  changed_when: False
  file:
    state: touch
    path: "/opt/bitnami/apps/{{ item.key }}/index.html"
    mode: '0664'
    owner: bitnami
    group: daemon
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable and not index_php_present[item.key]

- name: debug index_php_present var
  debug:
    msg: "{{ item.key }} - {{ index_php_present[item.key] }}"
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable

- name: create simple nginx config
  become: yes
  template:
    src: templates/simple.conf.j2
    dest: "/opt/bitnami/nginx/conf/server_blocks/{{ item.key }}.conf"
    owner: bitnami
    group: daemon
    mode: '0664'
  loop: "{{ APPs | dict2items }}"
  when: not item.value.redirect_elsewhere and item.value.enable
  notify:
    - Restart bitnami apps

- name: create redirect nginx config
  become: yes
  template:
    src: templates/redirect.conf.j2
    dest: "/opt/bitnami/nginx/conf/server_blocks/{{ item.key }}.conf"
    owner: bitnami
    group: daemon
    mode: '0664'
  loop: "{{ APPs | dict2items }}"
  when: item.value.redirect_elsewhere and item.value.enable
  notify:
    - Restart bitnami apps

- name: set cron shell
  cron:
    name: SHELL
    env: yes
    value: /usr/bin/bash

- name: install lego cron renew
  cron:
    name: "{{ item.key }} lego renew"
    hour: "{{ item.value.lego_cron_hour }}"
    minute: "{{ item.value.lego_cron_min }}"
    weekday: "{{ item.value.lego_cron_weekday }}"
    job: "sudo /opt/bitnami/letsencrypt/lego --path /opt/bitnami/letsencrypt/ --tls --domains {{ item.key }}  --email '{{ item.value.lego_email }}' renew --renew-hook '/opt/bitnami/nginx/sbin/nginx -s reload' >/dev/null 2>&1"
    state: present
    disabled: "{{ item.value.lego_cron_disable }}"
  loop: "{{ APPs | dict2items }}"
  when: item.value.enable and item.value.lego_cron_install is defined and item.value.lego_cron_install

- name: create letsencrypt directory
  become: yes
  file:
    state: directory
    path: "/opt/bitnami/letsencrypt"
    mode: "0755"
    owner: root
    group: root
  when: install_lego

- name: remove tmp lego glob files
  become: yes
  file:
    state: absent
    path: "{{ item }}"
  with_fileglob:
    - '/tmp/lego*'
  when: install_lego

- name: install lego binary if it does not exist
  become: yes
  script: scripts/install_lego.sh
  args:
    creates: /opt/bitnami/letsencrypt/lego
  when: install_lego

- name: update php.ini with tz for zabbix
  become: yes
  lineinfile:
    path: /opt/bitnami/php/etc/php.ini
    regexp: '^date.timezone ='
    line: 'date.timezone = America/New_York'
  notify:
    - Restart bitnami apps
  when: install_zabbix is defined and install_zabbix

- name: create databases for ea apps
  mysql_db:
    config_file: /opt/bitnami/mariadb/conf/my.cnf
    state: present
    name: zabbixdb
    collation: utf8_bin
    encoding: utf8
    login_password: "{{ MariaDB_Root_Password }}"
    login_user: root

- name: Create user with password, all database privileges and WITH GRANT OPTION for each app
  community.mysql.mysql_user:
    login_password: "{{ MariaDB_Root_Password }}"
    login_user: root
    state: present
    name: userzabbix
    password: zabbixpasswd
    priv: 'zabbixdb.*:ALL,GRANT'


# vim: ai et ts=2 sw=2 sts=2 nu
