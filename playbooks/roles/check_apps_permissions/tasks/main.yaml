---
- name: register app dirs
  become: yes
  ansible.builtin.find:
    path: /opt/bitnami/apps
    file_type: directory
  register: app_dirs_that_exist

- name: creating variable with existing app dirs
  debug:
    msg: "{{ item|basename }}"
  loop: "{{ app_dirs_that_exist.files | map(attribute='path') }}"
  register: existing_app_dir_basename

- name: Check needed owner,group app dir and files chown updates
  become: yes
  command: 'find /opt/bitnami/apps/{{ item.key }} ! \( -user bitnami -group daemon \) -print'
  args:
    warn: false
  changed_when: False
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable and item.key in existing_app_dir_basename.results|map(attribute='msg')
  register: need_chown_updating
  check_mode: no

- name: Display needed owner,group app dir and files chown updates
  debug:
    msg: "Needs chown updating: {{ item.stdout_lines }}"
  with_items: "{{ need_chown_updating.results }}"
  when: item.stdout is defined and item.stdout and ansible_check_mode
  changed_when:
    - item.stdout is defined
    - item.stdout

- name: Update owner,group app dir and files chown as needed
  become: yes
  command: 'find /opt/bitnami/apps/{{ item.key }} ! \( -user bitnami -group daemon \) -exec chown bitnami:daemon {} \; -print'
  args:
    warn: false
  changed_when: False
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable and item.key in existing_app_dir_basename.results|map(attribute='msg')
  register: actual_chown_updating

- name: Display actual owner,group app dir and files chown updates
  debug:
    msg: "chown updated: {{ item.stdout }}"
  with_items: "{{ actual_chown_updating.results }}"
  when: item.stdout is defined and item.stdout and not ansible_check_mode
  changed_when:
    - item.stdout is defined
    - item.stdout

- name: Check needed app dir chmod updates
  become: yes
  command: find /opt/bitnami/apps/{{ item.key }} -type d ! -perm 0775 -print
  args:
    warn: false
  changed_when: False
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable and item.key in existing_app_dir_basename.results|map(attribute='msg')
  register: dir_need_chmod_updating
  check_mode: no

- name: Display needed app dir chmod updates
  debug:
    msg: "Dir needing chmod updating: {{ item.stdout_lines }}"
  with_items: "{{ dir_need_chmod_updating.results }}"
  when: item.stdout is defined and item.stdout and ansible_check_mode
  changed_when:
    - item.stdout is defined
    - item.stdout

- name: Update app dir chmod as needed
  become: yes
  command: find /opt/bitnami/apps/{{ item.key }} -type d ! -perm 0775 -exec chmod 0775 {} \; -print
  args:
    warn: false
  changed_when: False
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable and item.key in existing_app_dir_basename.results|map(attribute='msg')
  register: actual_dir_chmod_updating

- name: Display actual app dir chmod updates
  debug:
    msg: "Dir chmod updated: {{ item.stdout }}"
  with_items: "{{ actual_dir_chmod_updating.results }}"
  when: item.stdout is defined and item.stdout and not ansible_check_mode
  changed_when:
    - item.stdout is defined
    - item.stdout

- name: Check needed app file chmod updates
  become: yes
  command: 'find /opt/bitnami/apps/{{ item.key }} -type f ! -name wp-config.php ! -perm 0664 -print'
  args:
    warn: false
  changed_when: False
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable and item.key in existing_app_dir_basename.results|map(attribute='msg')
  register: file_need_chmod_updating
  check_mode: no

- name: Display needed app file chmod updates
  debug:
    msg: "File needing chmod updating: {{ item.stdout_lines }}"
  with_items: "{{ file_need_chmod_updating.results }}"
  when: item.stdout is defined and item.stdout and ansible_check_mode
  changed_when:
    - item.stdout is defined
    - item.stdout

- name: Update app file chmod as needed
  become: yes
  command: 'find /opt/bitnami/apps/{{ item.key }} -type f ! -name wp-config.php ! -perm 0664 -exec chmod 0664 {} \; -print'
  args:
    warn: false
  changed_when: False
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable and item.key in existing_app_dir_basename.results|map(attribute='msg')
  register: actual_file_chmod_updating

- name: Display actual file dir chmod updates
  debug:
    msg: "File chmod updated: {{ item.stdout }}"
  with_items: "{{ actual_file_chmod_updating.results }}"
  when: item.stdout is defined and item.stdout and not ansible_check_mode
  changed_when:
    - item.stdout is defined
    - item.stdout

- name: Check needed wp-config.php chmod updates
  become: yes
  command: find /opt/bitnami/apps/{{ item.key }} -maxdepth 1 -type f -name wp-config.php ! -perm 0640 -print
  args:
    warn: false
  changed_when: False
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable and item.key in existing_app_dir_basename.results|map(attribute='msg')
  register: need_wp_config_chmod_updating
  check_mode: no

- name: Display needed wp-config.php chmod updates
  debug:
    msg: "Needs chmod updating: {{ item.stdout }}"
  with_items: "{{ need_wp_config_chmod_updating.results }}"
  when: item.stdout is defined and item.stdout and ansible_check_mode
  changed_when:
    - item.stdout is defined
    - item.stdout

- name: Update wp-config chmod as needed
  become: yes
  command: find /opt/bitnami/apps/{{ item.key }} -maxdepth 1 -type f -name wp-config.php ! -perm 0640 -exec chmod 0640 {} \; -print
  args:
    warn: false
  changed_when: False
  loop: "{{ APPs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.enable and item.key in existing_app_dir_basename.results|map(attribute='msg')
  register: wp_config_chmod_changed

- name: Display actual wp-config.php chmod updates
  debug:
    msg: "chmod updated: {{ item.stdout }}"
  with_items: "{{ wp_config_chmod_changed.results }}"
  when: item.stdout is defined and item.stdout and not ansible_check_mode
  changed_when:
    - item.stdout is defined
    - item.stdout

# vim: ai et ts=2 sw=2 sts=2 nu
